// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'sqliteModel.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Pengguna.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// ignore_for_file:
// BEGIN TABLES
// Pengguna TABLE
class TablePengguna extends SqfEntityTableBase {
  TablePengguna() {
    // declare properties of EntityTable
    tableName = 'pengguna';
    primaryKeyName = '';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id', DbType.integer,
          isPrimaryKeyField: true, isNotNull: false),
      SqfEntityFieldBase('id_pengguna', DbType.text, isNotNull: false),
      SqfEntityFieldBase('nama_pengguna', DbType.text, isNotNull: false),
      SqfEntityFieldBase('role', DbType.text, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TablePengguna();
  }
}

// Menu TABLE
class TableMenu extends SqfEntityTableBase {
  TableMenu() {
    // declare properties of EntityTable
    tableName = 'menu';
    primaryKeyName = '';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('id', DbType.integer,
          isPrimaryKeyField: true, isNotNull: false),
      SqfEntityFieldBase('id_menu', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('nama_menu', DbType.text, isNotNull: false),
      SqfEntityFieldBase('jenis_menu', DbType.text, isNotNull: false),
      SqfEntityFieldBase('foto_menu', DbType.text, isNotNull: false),
      SqfEntityFieldBase('deskripsi', DbType.text, isNotNull: false),
      SqfEntityFieldBase('harga', DbType.integer, isNotNull: false),
      SqfEntityFieldBase('diskon', DbType.integer, isNotNull: false),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableMenu();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class AppDBModel extends SqfEntityModelProvider {
  AppDBModel() {
    databaseName = dbModel.databaseName;
    password = dbModel.password;
    dbVersion = dbModel.dbVersion;
    databaseTables = [
      TablePengguna.getInstance,
      TableMenu.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = dbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Pengguna
class Pengguna {
  Pengguna({this.id, this.id_pengguna, this.nama_pengguna, this.role}) {
    _setDefaultValues();
  }
  Pengguna.withFields(this.id_pengguna, this.nama_pengguna, this.role) {
    _setDefaultValues();
  }
  Pengguna.withId(this.id, this.id_pengguna, this.nama_pengguna, this.role) {
    _setDefaultValues();
  }
  Pengguna.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    if (o['id'] != null) {
      id = int.tryParse(o['id'].toString());
    }
    if (o['id_pengguna'] != null) {
      id_pengguna = o['id_pengguna'] as String;
    }
    if (o['nama_pengguna'] != null) {
      nama_pengguna = o['nama_pengguna'] as String;
    }
    if (o['role'] != null) {
      role = o['role'] as String;
    }

    isSaved = true;
  }
  // FIELDS (Pengguna)
  int id;
  String id_pengguna;
  String nama_pengguna;
  String role;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (Pengguna)

  static const bool _softDeleteActivated = false;
  PenggunaManager __mnPengguna;

  PenggunaManager get _mnPengguna {
    return __mnPengguna = __mnPengguna ?? PenggunaManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }

    if (id_pengguna != null) {
      map['id_pengguna'] = id_pengguna;
    }

    if (nama_pengguna != null) {
      map['nama_pengguna'] = nama_pengguna;
    }

    if (role != null) {
      map['role'] = role;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }

    if (id_pengguna != null) {
      map['id_pengguna'] = id_pengguna;
    }

    if (nama_pengguna != null) {
      map['nama_pengguna'] = nama_pengguna;
    }

    if (role != null) {
      map['role'] = role;
    }

    return map;
  }

  /// This method returns Json String [Pengguna]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Pengguna]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [id_pengguna, nama_pengguna, role];
  }

  List<dynamic> toArgsWithIds() {
    return [id, id_pengguna, nama_pengguna, role];
  }

  static Future<List<Pengguna>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Pengguna.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Pengguna>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Pengguna>[];
    try {
      objList = list
          .map((pengguna) => Pengguna.fromMap(pengguna as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Pengguna.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Pengguna>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Pengguna> objList = <Pengguna>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Pengguna.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Pengguna by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Pengguna if exist, otherwise returns null
  Future<Pengguna> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Pengguna obj;
    final data = await _mnPengguna.getById([id]);
    if (data.length != 0) {
      obj = Pengguna.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Pengguna) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0 || !isSaved) {
      await _mnPengguna.insert(this);
      if (saveResult != null && saveResult.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnPengguna.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Pengguna> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Pengguna> penggunas) async {
    // final results = _mnPengguna.saveAll('INSERT OR REPLACE INTO pengguna (id, id_pengguna, nama_pengguna, role)  VALUES (?,?,?,?)',penggunas);
    // return results; removed in sqfentity_gen 1.3.0+6
    await AppDBModel().batchStart();
    for (final obj in penggunas) {
      await obj.save();
    }
    //    return AppDBModel().batchCommit();
    final result = await AppDBModel().batchCommit();
    for (int i = 0; i < penggunas.length; i++) {
      if (penggunas[i].id == null) {
        penggunas[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnPengguna.rawInsert(
              'INSERT OR REPLACE INTO pengguna (id, id_pengguna, nama_pengguna, role)  VALUES (?,?,?,?)',
              [id, id_pengguna, nama_pengguna, role]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Pengguna id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Pengguna id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Pengguna Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Pengguna>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Pengguna> penggunas) async {
    final results = await _mnPengguna.rawInsertAll(
        'INSERT OR REPLACE INTO pengguna (id, id_pengguna, nama_pengguna, role)  VALUES (?,?,?,?)',
        penggunas);
    return results;
  }

  /// Deletes Pengguna

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Pengguna invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnPengguna
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnPengguna.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  PenggunaFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return PenggunaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  PenggunaFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return PenggunaFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion pengguna

// region PenggunaField
class PenggunaField extends SearchCriteria {
  PenggunaField(this.penggunaFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  PenggunaFilterBuilder penggunaFB;

  PenggunaField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  PenggunaFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    penggunaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, penggunaFB.parameters, param, SqlSyntax.EQuals,
            penggunaFB._addedBlocks)
        : setCriteria(pValue, penggunaFB.parameters, param, SqlSyntax.NotEQuals,
            penggunaFB._addedBlocks);
    _waitingNot = '';
    penggunaFB._addedBlocks.needEndBlock[penggunaFB._blockIndex] =
        penggunaFB._addedBlocks.retVal;
    return penggunaFB;
  }

  PenggunaFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    penggunaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, penggunaFB.parameters, param,
            SqlSyntax.EQualsOrNull, penggunaFB._addedBlocks)
        : setCriteria(pValue, penggunaFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, penggunaFB._addedBlocks);
    _waitingNot = '';
    penggunaFB._addedBlocks.needEndBlock[penggunaFB._blockIndex] =
        penggunaFB._addedBlocks.retVal;
    return penggunaFB;
  }

  PenggunaFilterBuilder isNull() {
    penggunaFB._addedBlocks = setCriteria(
        0,
        penggunaFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        penggunaFB._addedBlocks);
    _waitingNot = '';
    penggunaFB._addedBlocks.needEndBlock[penggunaFB._blockIndex] =
        penggunaFB._addedBlocks.retVal;
    return penggunaFB;
  }

  PenggunaFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      penggunaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          penggunaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          penggunaFB._addedBlocks);
      _waitingNot = '';
      penggunaFB._addedBlocks.needEndBlock[penggunaFB._blockIndex] =
          penggunaFB._addedBlocks.retVal;
    }
    return penggunaFB;
  }

  PenggunaFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      penggunaFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          penggunaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          penggunaFB._addedBlocks);
      _waitingNot = '';
      penggunaFB._addedBlocks.needEndBlock[penggunaFB._blockIndex] =
          penggunaFB._addedBlocks.retVal;
      penggunaFB._addedBlocks.needEndBlock[penggunaFB._blockIndex] =
          penggunaFB._addedBlocks.retVal;
    }
    return penggunaFB;
  }

  PenggunaFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      penggunaFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          penggunaFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          penggunaFB._addedBlocks);
      _waitingNot = '';
      penggunaFB._addedBlocks.needEndBlock[penggunaFB._blockIndex] =
          penggunaFB._addedBlocks.retVal;
    }
    return penggunaFB;
  }

  PenggunaFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      penggunaFB._addedBlocks = setCriteria(
          pFirst,
          penggunaFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          penggunaFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        penggunaFB._addedBlocks = setCriteria(pFirst, penggunaFB.parameters,
            param, SqlSyntax.LessThan, penggunaFB._addedBlocks);
      } else {
        penggunaFB._addedBlocks = setCriteria(pFirst, penggunaFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, penggunaFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        penggunaFB._addedBlocks = setCriteria(pLast, penggunaFB.parameters,
            param, SqlSyntax.GreaterThan, penggunaFB._addedBlocks);
      } else {
        penggunaFB._addedBlocks = setCriteria(pLast, penggunaFB.parameters,
            param, SqlSyntax.LessThanOrEquals, penggunaFB._addedBlocks);
      }
    }
    _waitingNot = '';
    penggunaFB._addedBlocks.needEndBlock[penggunaFB._blockIndex] =
        penggunaFB._addedBlocks.retVal;
    return penggunaFB;
  }

  PenggunaFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    penggunaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, penggunaFB.parameters, param,
            SqlSyntax.GreaterThan, penggunaFB._addedBlocks)
        : setCriteria(pValue, penggunaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, penggunaFB._addedBlocks);
    _waitingNot = '';
    penggunaFB._addedBlocks.needEndBlock[penggunaFB._blockIndex] =
        penggunaFB._addedBlocks.retVal;
    return penggunaFB;
  }

  PenggunaFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    penggunaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, penggunaFB.parameters, param, SqlSyntax.LessThan,
            penggunaFB._addedBlocks)
        : setCriteria(pValue, penggunaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, penggunaFB._addedBlocks);
    _waitingNot = '';
    penggunaFB._addedBlocks.needEndBlock[penggunaFB._blockIndex] =
        penggunaFB._addedBlocks.retVal;
    return penggunaFB;
  }

  PenggunaFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    penggunaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, penggunaFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, penggunaFB._addedBlocks)
        : setCriteria(pValue, penggunaFB.parameters, param, SqlSyntax.LessThan,
            penggunaFB._addedBlocks);
    _waitingNot = '';
    penggunaFB._addedBlocks.needEndBlock[penggunaFB._blockIndex] =
        penggunaFB._addedBlocks.retVal;
    return penggunaFB;
  }

  PenggunaFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    penggunaFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, penggunaFB.parameters, param,
            SqlSyntax.LessThanOrEquals, penggunaFB._addedBlocks)
        : setCriteria(pValue, penggunaFB.parameters, param,
            SqlSyntax.GreaterThan, penggunaFB._addedBlocks);
    _waitingNot = '';
    penggunaFB._addedBlocks.needEndBlock[penggunaFB._blockIndex] =
        penggunaFB._addedBlocks.retVal;
    return penggunaFB;
  }

  PenggunaFilterBuilder inValues(dynamic pValue) {
    penggunaFB._addedBlocks = setCriteria(
        pValue,
        penggunaFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        penggunaFB._addedBlocks);
    _waitingNot = '';
    penggunaFB._addedBlocks.needEndBlock[penggunaFB._blockIndex] =
        penggunaFB._addedBlocks.retVal;
    return penggunaFB;
  }
}
// endregion PenggunaField

// region PenggunaFilterBuilder
class PenggunaFilterBuilder extends SearchCriteria {
  PenggunaFilterBuilder(Pengguna obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Pengguna _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  PenggunaFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  PenggunaFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  PenggunaFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  PenggunaFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  PenggunaFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  PenggunaFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  PenggunaFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  PenggunaFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  PenggunaFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  PenggunaFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  PenggunaFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  PenggunaField setField(PenggunaField field, String colName, DbType dbtype) {
    return PenggunaField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  PenggunaField _id;
  PenggunaField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  PenggunaField _id_pengguna;
  PenggunaField get id_pengguna {
    return _id_pengguna = setField(_id_pengguna, 'id_pengguna', DbType.text);
  }

  PenggunaField _nama_pengguna;
  PenggunaField get nama_pengguna {
    return _nama_pengguna =
        setField(_nama_pengguna, 'nama_pengguna', DbType.text);
  }

  PenggunaField _role;
  PenggunaField get role {
    return _role = setField(_role, 'role', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Pengguna._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Pengguna> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Pengguna._softDeleteActivated && !hardDelete) {
      r = await _obj._mnPengguna.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnPengguna.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from pengguna ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnPengguna.updateBatch(qparams, values);
  }

  /// This method always returns Pengguna Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Pengguna>
  Future<Pengguna> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnPengguna.toList(qparams);
    final data = await objFuture;
    Pengguna obj;
    if (data.isNotEmpty) {
      obj = Pengguna.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Pengguna]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) penggunaCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final penggunasFuture = await _obj._mnPengguna.toList(qparams);
    final int count = penggunasFuture[0]['CNT'] as int;
    if (penggunaCount != null) {
      penggunaCount(count);
    }
    return count;
  }

  /// This method returns List<Pengguna> [Pengguna]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Pengguna>
  Future<List<Pengguna>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Pengguna> penggunasData = await Pengguna.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return penggunasData;
  }

  /// This method returns Json String [Pengguna]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Pengguna]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Pengguna]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnPengguna.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Pengguna]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM pengguna WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnPengguna.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Pengguna]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnPengguna.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Pengguna.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnPengguna.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion PenggunaFilterBuilder

// region PenggunaFields
class PenggunaFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fId_pengguna;
  static TableField get id_pengguna {
    return _fId_pengguna = _fId_pengguna ??
        SqlSyntax.setField(_fId_pengguna, 'id_pengguna', DbType.text);
  }

  static TableField _fNama_pengguna;
  static TableField get nama_pengguna {
    return _fNama_pengguna = _fNama_pengguna ??
        SqlSyntax.setField(_fNama_pengguna, 'nama_pengguna', DbType.text);
  }

  static TableField _fRole;
  static TableField get role {
    return _fRole = _fRole ?? SqlSyntax.setField(_fRole, 'role', DbType.text);
  }
}
// endregion PenggunaFields

//region PenggunaManager
class PenggunaManager extends SqfEntityProvider {
  PenggunaManager()
      : super(AppDBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'pengguna';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion PenggunaManager
// region Menu
class Menu {
  Menu(
      {this.id,
      this.id_menu,
      this.nama_menu,
      this.jenis_menu,
      this.foto_menu,
      this.deskripsi,
      this.harga,
      this.diskon}) {
    _setDefaultValues();
  }
  Menu.withFields(this.id_menu, this.nama_menu, this.jenis_menu, this.foto_menu,
      this.deskripsi, this.harga, this.diskon) {
    _setDefaultValues();
  }
  Menu.withId(this.id, this.id_menu, this.nama_menu, this.jenis_menu,
      this.foto_menu, this.deskripsi, this.harga, this.diskon) {
    _setDefaultValues();
  }
  Menu.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    if (o['id'] != null) {
      id = int.tryParse(o['id'].toString());
    }
    if (o['id_menu'] != null) {
      id_menu = o['id_menu'] as int;
    }
    if (o['nama_menu'] != null) {
      nama_menu = o['nama_menu'] as String;
    }
    if (o['jenis_menu'] != null) {
      jenis_menu = o['jenis_menu'] as String;
    }
    if (o['foto_menu'] != null) {
      foto_menu = o['foto_menu'] as String;
    }
    if (o['deskripsi'] != null) {
      deskripsi = o['deskripsi'] as String;
    }
    if (o['harga'] != null) {
      harga = o['harga'] as int;
    }
    if (o['diskon'] != null) {
      diskon = o['diskon'] as int;
    }

    isSaved = true;
  }
  // FIELDS (Menu)
  int id;
  int id_menu;
  String nama_menu;
  String jenis_menu;
  String foto_menu;
  String deskripsi;
  int harga;
  int diskon;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (Menu)

  static const bool _softDeleteActivated = false;
  MenuManager __mnMenu;

  MenuManager get _mnMenu {
    return __mnMenu = __mnMenu ?? MenuManager();
  }

  // METHODS
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }

    if (id_menu != null) {
      map['id_menu'] = id_menu;
    }

    if (nama_menu != null) {
      map['nama_menu'] = nama_menu;
    }

    if (jenis_menu != null) {
      map['jenis_menu'] = jenis_menu;
    }

    if (foto_menu != null) {
      map['foto_menu'] = foto_menu;
    }

    if (deskripsi != null) {
      map['deskripsi'] = deskripsi;
    }

    if (harga != null) {
      map['harga'] = harga;
    }

    if (diskon != null) {
      map['diskon'] = diskon;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }

    if (id_menu != null) {
      map['id_menu'] = id_menu;
    }

    if (nama_menu != null) {
      map['nama_menu'] = nama_menu;
    }

    if (jenis_menu != null) {
      map['jenis_menu'] = jenis_menu;
    }

    if (foto_menu != null) {
      map['foto_menu'] = foto_menu;
    }

    if (deskripsi != null) {
      map['deskripsi'] = deskripsi;
    }

    if (harga != null) {
      map['harga'] = harga;
    }

    if (diskon != null) {
      map['diskon'] = diskon;
    }

    return map;
  }

  /// This method returns Json String [Menu]
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Menu]
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id_menu,
      nama_menu,
      jenis_menu,
      foto_menu,
      deskripsi,
      harga,
      diskon
    ];
  }

  List<dynamic> toArgsWithIds() {
    return [
      id,
      id_menu,
      nama_menu,
      jenis_menu,
      foto_menu,
      deskripsi,
      harga,
      diskon
    ];
  }

  static Future<List<Menu>> fromWebUrl(String url,
      {Map<String, String> headers}) async {
    try {
      final response = await http.get(url, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Menu.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(String url, {Map<String, String> headers}) {
    return http.post(url, headers: headers, body: toJson());
  }

  static Future<List<Menu>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Menu>[];
    try {
      objList = list
          .map((menu) => Menu.fromMap(menu as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Menu.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Menu>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields,
      bool setDefaultValues = true}) async {
    final List<Menu> objList = <Menu>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Menu.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Menu by ID if exist, otherwise returns null
  ///
  /// Primary Keys: int id
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: getById(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>returns Menu if exist, otherwise returns null
  Future<Menu> getById(int id,
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    if (id == null) {
      return null;
    }
    Menu obj;
    final data = await _mnMenu.getById([id]);
    if (data.length != 0) {
      obj = Menu.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Menu) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0 || !isSaved) {
      await _mnMenu.insert(this);
      if (saveResult != null && saveResult.success) {
        isSaved = true;
      }
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnMenu.update(this);
    }

    return id;
  }

  /// saveAll method saves the sent List<Menu> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Menu> menus) async {
    // final results = _mnMenu.saveAll('INSERT OR REPLACE INTO menu (id, id_menu, nama_menu, jenis_menu, foto_menu, deskripsi, harga, diskon)  VALUES (?,?,?,?,?,?,?,?)',menus);
    // return results; removed in sqfentity_gen 1.3.0+6
    await AppDBModel().batchStart();
    for (final obj in menus) {
      await obj.save();
    }
    //    return AppDBModel().batchCommit();
    final result = await AppDBModel().batchCommit();
    for (int i = 0; i < menus.length; i++) {
      if (menus[i].id == null) {
        menus[i].id = result[i] as int;
      }
    }

    return result;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> upsert() async {
    try {
      if (await _mnMenu.rawInsert(
              'INSERT OR REPLACE INTO menu (id, id_menu, nama_menu, jenis_menu, foto_menu, deskripsi, harga, diskon)  VALUES (?,?,?,?,?,?,?,?)',
              [
                id,
                id_menu,
                nama_menu,
                jenis_menu,
                foto_menu,
                deskripsi,
                harga,
                diskon
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true, successMessage: 'Menu id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Menu id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Menu Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Menu>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a BoolCommitResult
  Future<BoolCommitResult> upsertAll(List<Menu> menus) async {
    final results = await _mnMenu.rawInsertAll(
        'INSERT OR REPLACE INTO menu (id, id_menu, nama_menu, jenis_menu, foto_menu, deskripsi, harga, diskon)  VALUES (?,?,?,?,?,?,?,?)',
        menus);
    return results;
  }

  /// Deletes Menu

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Menu invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnMenu
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnMenu.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  MenuFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return MenuFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  MenuFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return MenuFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion menu

// region MenuField
class MenuField extends SearchCriteria {
  MenuField(this.menuFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  MenuFilterBuilder menuFB;

  MenuField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  MenuFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    menuFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, menuFB.parameters, param, SqlSyntax.EQuals,
            menuFB._addedBlocks)
        : setCriteria(pValue, menuFB.parameters, param, SqlSyntax.NotEQuals,
            menuFB._addedBlocks);
    _waitingNot = '';
    menuFB._addedBlocks.needEndBlock[menuFB._blockIndex] =
        menuFB._addedBlocks.retVal;
    return menuFB;
  }

  MenuFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    menuFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, menuFB.parameters, param, SqlSyntax.EQualsOrNull,
            menuFB._addedBlocks)
        : setCriteria(pValue, menuFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, menuFB._addedBlocks);
    _waitingNot = '';
    menuFB._addedBlocks.needEndBlock[menuFB._blockIndex] =
        menuFB._addedBlocks.retVal;
    return menuFB;
  }

  MenuFilterBuilder isNull() {
    menuFB._addedBlocks = setCriteria(
        0,
        menuFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        menuFB._addedBlocks);
    _waitingNot = '';
    menuFB._addedBlocks.needEndBlock[menuFB._blockIndex] =
        menuFB._addedBlocks.retVal;
    return menuFB;
  }

  MenuFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      menuFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          menuFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          menuFB._addedBlocks);
      _waitingNot = '';
      menuFB._addedBlocks.needEndBlock[menuFB._blockIndex] =
          menuFB._addedBlocks.retVal;
    }
    return menuFB;
  }

  MenuFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      menuFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          menuFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          menuFB._addedBlocks);
      _waitingNot = '';
      menuFB._addedBlocks.needEndBlock[menuFB._blockIndex] =
          menuFB._addedBlocks.retVal;
      menuFB._addedBlocks.needEndBlock[menuFB._blockIndex] =
          menuFB._addedBlocks.retVal;
    }
    return menuFB;
  }

  MenuFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      menuFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          menuFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          menuFB._addedBlocks);
      _waitingNot = '';
      menuFB._addedBlocks.needEndBlock[menuFB._blockIndex] =
          menuFB._addedBlocks.retVal;
    }
    return menuFB;
  }

  MenuFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      menuFB._addedBlocks = setCriteria(
          pFirst,
          menuFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          menuFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        menuFB._addedBlocks = setCriteria(pFirst, menuFB.parameters, param,
            SqlSyntax.LessThan, menuFB._addedBlocks);
      } else {
        menuFB._addedBlocks = setCriteria(pFirst, menuFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, menuFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        menuFB._addedBlocks = setCriteria(pLast, menuFB.parameters, param,
            SqlSyntax.GreaterThan, menuFB._addedBlocks);
      } else {
        menuFB._addedBlocks = setCriteria(pLast, menuFB.parameters, param,
            SqlSyntax.LessThanOrEquals, menuFB._addedBlocks);
      }
    }
    _waitingNot = '';
    menuFB._addedBlocks.needEndBlock[menuFB._blockIndex] =
        menuFB._addedBlocks.retVal;
    return menuFB;
  }

  MenuFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    menuFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, menuFB.parameters, param, SqlSyntax.GreaterThan,
            menuFB._addedBlocks)
        : setCriteria(pValue, menuFB.parameters, param,
            SqlSyntax.LessThanOrEquals, menuFB._addedBlocks);
    _waitingNot = '';
    menuFB._addedBlocks.needEndBlock[menuFB._blockIndex] =
        menuFB._addedBlocks.retVal;
    return menuFB;
  }

  MenuFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    menuFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, menuFB.parameters, param, SqlSyntax.LessThan,
            menuFB._addedBlocks)
        : setCriteria(pValue, menuFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, menuFB._addedBlocks);
    _waitingNot = '';
    menuFB._addedBlocks.needEndBlock[menuFB._blockIndex] =
        menuFB._addedBlocks.retVal;
    return menuFB;
  }

  MenuFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    menuFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, menuFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, menuFB._addedBlocks)
        : setCriteria(pValue, menuFB.parameters, param, SqlSyntax.LessThan,
            menuFB._addedBlocks);
    _waitingNot = '';
    menuFB._addedBlocks.needEndBlock[menuFB._blockIndex] =
        menuFB._addedBlocks.retVal;
    return menuFB;
  }

  MenuFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    menuFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, menuFB.parameters, param,
            SqlSyntax.LessThanOrEquals, menuFB._addedBlocks)
        : setCriteria(pValue, menuFB.parameters, param, SqlSyntax.GreaterThan,
            menuFB._addedBlocks);
    _waitingNot = '';
    menuFB._addedBlocks.needEndBlock[menuFB._blockIndex] =
        menuFB._addedBlocks.retVal;
    return menuFB;
  }

  MenuFilterBuilder inValues(dynamic pValue) {
    menuFB._addedBlocks = setCriteria(
        pValue,
        menuFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        menuFB._addedBlocks);
    _waitingNot = '';
    menuFB._addedBlocks.needEndBlock[menuFB._blockIndex] =
        menuFB._addedBlocks.retVal;
    return menuFB;
  }
}
// endregion MenuField

// region MenuFilterBuilder
class MenuFilterBuilder extends SearchCriteria {
  MenuFilterBuilder(Menu obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Menu _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  MenuFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  MenuFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  MenuFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) {
      _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    }
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  MenuFilterBuilder where(String whereCriteria, {dynamic parameterValue}) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter(
          columnName: parameterValue == null ? null : '',
          hasParameter: parameterValue != null);
      _addedBlocks = setCriteria(parameterValue ?? 0, parameters, param,
          '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  MenuFilterBuilder page(int page, int pagesize) {
    if (page > 0) {
      _page = page;
    }
    if (pagesize > 0) {
      _pagesize = pagesize;
    }
    return this;
  }

  /// int count = LIMIT
  MenuFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  MenuFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  MenuFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  MenuFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            orderByList.add(' $s desc ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  MenuFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            groupByList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  MenuFilterBuilder having(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        havingList.add(argFields);
      } else {
        for (String s in argFields as List<String>) {
          if (s != null && s.isNotEmpty) {
            havingList.add(' $s ');
          }
        }
      }
    }
    return this;
  }

  MenuField setField(MenuField field, String colName, DbType dbtype) {
    return MenuField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  MenuField _id;
  MenuField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  MenuField _id_menu;
  MenuField get id_menu {
    return _id_menu = setField(_id_menu, 'id_menu', DbType.text);
  }

  MenuField _nama_menu;
  MenuField get nama_menu {
    return _nama_menu = setField(_nama_menu, 'nama_menu', DbType.text);
  }

  MenuField _jenis_menu;
  MenuField get jenis_menu {
    return _jenis_menu = setField(_jenis_menu, 'jenis_menu', DbType.text);
  }

  MenuField _foto_menu;
  MenuField get foto_menu {
    return _foto_menu = setField(_foto_menu, 'foto_menu', DbType.text);
  }

  MenuField _deskripsi;
  MenuField get deskripsi {
    return _deskripsi = setField(_deskripsi, 'deskripsi', DbType.text);
  }

  MenuField _harga;
  MenuField get harga {
    return _harga = setField(_harga, 'harga', DbType.text);
  }

  MenuField _diskon;
  MenuField get diskon {
    return _diskon = setField(_diskon, 'diskon', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List && !param.hasParameter) {
          param.value = param.dbType == DbType.text
              ? '\'${param.value.join('\',\'')}\''
              : param.value.join(',');
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          if (param.value is Map<String, dynamic> &&
              param.value['sql'] != null) {
            param
              ..whereString = param.whereString
                  .replaceAll('?', param.value['sql'].toString())
              ..dbType = DbType.integer
              ..value = param.value['args'];
          }
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value = param.value == null
                  ? null
                  : param.value == true
                      ? 1
                      : 0;
              param.value2 = param.value2 == null
                  ? null
                  : param.value2 == true
                      ? 1
                      : 0;
              break;
            case DbType.date:
            case DbType.datetime:
            case DbType.datetimeUtc:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            if (param.value is List) {
              for (var p in param.value) {
                whereArguments.add(p);
              }
            } else {
              whereArguments.add(param.value);
            }
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Menu._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',')
      ..having = havingList.join(',');
  }

  /// Deletes List<Menu> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();

    if (Menu._softDeleteActivated && !hardDelete) {
      r = await _obj._mnMenu.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnMenu.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from menu ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnMenu.updateBatch(qparams, values);
  }

  /// This method always returns Menu Obj if exist, otherwise returns null
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toSingle(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Menu>
  Future<Menu> toSingle(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnMenu.toList(qparams);
    final data = await objFuture;
    Menu obj;
    if (data.isNotEmpty) {
      obj = Menu.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method returns int. [Menu]
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) menuCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final menusFuture = await _obj._mnMenu.toList(qparams);
    final int count = menusFuture[0]['CNT'] as int;
    if (menuCount != null) {
      menuCount(count);
    }
    return count;
  }

  /// This method returns List<Menu> [Menu]
  ///
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  ///
  /// ex: toList(preload:true) -> Loads all related objects
  ///
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  ///
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  ///
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  ///
  /// <returns>List<Menu>
  Future<List<Menu>> toList(
      {bool preload = false,
      List<String> preloadFields,
      bool loadParents = false,
      List<String> loadedFields}) async {
    final data = await toMapList();
    final List<Menu> menusData = await Menu.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return menusData;
  }

  /// This method returns Json String [Menu]
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Menu]
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Menu]
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnMenu.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Menu]
  ///
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  ///
  /// <returns>List<String>
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParameters = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParameters) {
      _buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM menu WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) {
      _buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnMenu.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Menu]
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject() async {
    _buildParameters();

    final objectFuture = _obj._mnMenu.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Menu.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnMenu.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion MenuFilterBuilder

// region MenuFields
class MenuFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fId_menu;
  static TableField get id_menu {
    return _fId_menu =
        _fId_menu ?? SqlSyntax.setField(_fId_menu, 'id_menu', DbType.text);
  }

  static TableField _fNama_menu;
  static TableField get nama_menu {
    return _fNama_menu = _fNama_menu ??
        SqlSyntax.setField(_fNama_menu, 'nama_menu', DbType.text);
  }

  static TableField _fJenis_menu;
  static TableField get jenis_menu {
    return _fJenis_menu = _fJenis_menu ??
        SqlSyntax.setField(_fJenis_menu, 'jenis_menu', DbType.text);
  }

  static TableField _fFoto_menu;
  static TableField get foto_menu {
    return _fFoto_menu = _fFoto_menu ??
        SqlSyntax.setField(_fFoto_menu, 'foto_menu', DbType.text);
  }

  static TableField _fDeskripsi;
  static TableField get deskripsi {
    return _fDeskripsi = _fDeskripsi ??
        SqlSyntax.setField(_fDeskripsi, 'deskripsi', DbType.text);
  }

  static TableField _fHarga;
  static TableField get harga {
    return _fHarga =
        _fHarga ?? SqlSyntax.setField(_fHarga, 'harga', DbType.text);
  }

  static TableField _fDiskon;
  static TableField get diskon {
    return _fDiskon =
        _fDiskon ?? SqlSyntax.setField(_fDiskon, 'diskon', DbType.text);
  }
}
// endregion MenuFields

//region MenuManager
class MenuManager extends SqfEntityProvider {
  MenuManager()
      : super(AppDBModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static final String _tableName = 'menu';
  static final List<String> _primaryKeyList = ['id'];
  static final String _whereStr = 'id=?';
}

//endregion MenuManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o) nextval]) async {
    final val = await AppDBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o) currentval]) async {
    final val = await AppDBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o) currentval]) async {
    final val = await AppDBModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class AppDBModelSequenceManager extends SqfEntityProvider {
  AppDBModelSequenceManager() : super(AppDBModel());
}
// END OF ENTITIES
